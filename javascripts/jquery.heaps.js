// Generated by CoffeeScript 1.4.0
(function() {

  (function($) {
    $.heap = function(el, selector, options) {
      var bySize, coordinateToPosition, isFit, occupyPosition, place, scoreCoordinate, scoreCoordinates, sortCoordinates,
        _this = this;
      this.el = el;
      this.$el = $(el);
      this.init = function() {
        var elements, k, v, _i, _len, _ref;
        _this.body = $('body');
        _this.options = $.extend({}, $.heap.defaultOptions, options);
        _this.$el.css({
          position: 'relative'
        });
        _this.width = _this.$el.outerWidth();
        _this.height = _this.$el.outerHeight();
        _this.center = [_this.width / 2, _this.height / 2];
        _this.sortedCoordinates = sortCoordinates(_this.width, _this.height);
        _this.canvas = {};
        _ref = _this.sortedCoordinates;
        for (v = _i = 0, _len = _ref.length; _i < _len; v = ++_i) {
          k = _ref[v];
          _this.canvas[k] = v;
        }
        if (selector) {
          elements = $(selector, _this.el);
          if (_this.options.sort) {
            elements = elements.sort(bySize);
          }
          elements.each(place);
        }
        return _this;
      };
      place = function(i, el) {
        return _this.place(el);
      };
      this.place = function(el) {
        var $el, height, position, width;
        $el = $(el);
        $el.hide();
        width = $el.outerWidth();
        height = $el.outerHeight();
        position = _this.findBestPosition(width, height);
        if (!position) {
          return null;
        }
        occupyPosition(width, height, position);
        $el.css({
          position: 'absolute',
          left: position[0] + 'px',
          top: position[1] + 'px'
        });
        return $el.show();
      };
      this.findBestPosition = function(width, height) {
        var coordinate, position, _i, _len, _ref;
        if (height > _this.height || width > _this.width) {
          return;
        }
        _ref = _this.sortedCoordinates;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          coordinate = _ref[_i];
          if (!coordinate) {
            continue;
          }
          position = coordinateToPosition(width, height, coordinate);
          if (isFit(width, height, position)) {
            return position;
          }
        }
      };
      occupyPosition = function(width, height, position) {
        var left, top, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
        left = position[0];
        top = position[1];
        for (x = _i = left, _ref = left + width, _ref1 = _this.options.step; left <= _ref ? _i < _ref : _i > _ref; x = _i += _ref1) {
          for (y = _j = top, _ref2 = top + height, _ref3 = _this.options.step; top <= _ref2 ? _j < _ref2 : _j > _ref2; y = _j += _ref3) {
            delete _this.sortedCoordinates[_this.canvas[[x, y]]];
            _this.canvas[[x, y]] = false;
          }
        }
        return null;
      };
      coordinateToPosition = function(width, height, coordinate) {
        var x, y;
        x = Math.floor(coordinate[0] - width / 2);
        y = Math.floor(coordinate[1] - height / 2);
        return [x - (x % _this.options.step), y - (y % _this.options.step)];
      };
      isFit = function(width, height, position) {
        var left, potentialPoint, top, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
        left = position[0];
        top = position[1];
        for (x = _i = left, _ref = left + width, _ref1 = _this.options.step; left <= _ref ? _i < _ref : _i > _ref; x = _i += _ref1) {
          for (y = _j = top, _ref2 = top + height, _ref3 = _this.options.step; top <= _ref2 ? _j < _ref2 : _j > _ref2; y = _j += _ref3) {
            potentialPoint = _this.canvas[[x, y]];
            if (potentialPoint == null) {
              return false;
            }
            if (potentialPoint === false) {
              return false;
            }
          }
        }
        return true;
      };
      sortCoordinates = function(width, height) {
        var coordinates, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
        coordinates = [];
        for (x = _i = 0, _ref = width - _this.options.step, _ref1 = _this.options.step; 0 <= _ref ? _i <= _ref : _i >= _ref; x = _i += _ref1) {
          for (y = _j = 0, _ref2 = height - _this.options.step, _ref3 = _this.options.step; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; y = _j += _ref3) {
            coordinates.push([x, y]);
          }
        }
        return coordinates.sort(scoreCoordinates);
      };
      scoreCoordinates = function(a, b) {
        if (_this.options.scoring) {
          return _this.options.scoring.call(_this, a) - _this.options.scoring.call(_this, b);
        } else {
          return scoreCoordinate(a) - scoreCoordinate(b);
        }
      };
      scoreCoordinate = function(coordinate) {
        return Math.sqrt(Math.pow(coordinate[0] - _this.center[0], 2) + Math.pow(coordinate[1] - _this.center[1], 2));
      };
      this.debugPosition = function(position) {
        return _this.$el.append($("<div class=\"dot\" title=\"available: " + position + "\" style=\"left: " + position[0] + "px; top: " + position[1] + "px;\"></div>"));
      };
      this.debugOccupiedPosition = function(position) {
        return _this.$el.append($("<div class=\"occupied\" title=\"occupied: " + position + "\" style=\"left: " + position[0] + "px; top: " + position[1] + "px;\"></div>"));
      };
      bySize = function(a, b) {
        var $a, $b, areaA, areaB;
        $a = $(a);
        $b = $(b);
        areaA = $a.width() * $a.height();
        areaB = $b.width() * $b.height();
        return areaB - areaA;
      };
      return this.init();
    };
    $.heap.defaultOptions = {
      step: 10
    };
    $.fn.heapify = function(selector, options) {
      return $.each(this, function(i, el) {
        var $el;
        $el = $(el);
        if (!$el.data('heap')) {
          return $el.data('heap', new $.heap(el, selector, options));
        }
      });
    };
    return void 0;
  })(jQuery);

}).call(this);
