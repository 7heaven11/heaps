!!! 5
%html(lang="en")
  %head
    %meta(charset="utf-8")
    %meta(http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1")
    %meta(name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no")

    %title heaps.js by sillylogger

    /[if lt IE 9]
      %script(src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.6.1/html5shiv.js")

    %script(src="javascripts/scale.fix.js")
    %script(src="javascripts/jquery.js")
    %script(src="javascripts/jquery.heaps.js")

    %link(rel="stylesheet" href="stylesheets/styles.css")
    %link(rel="stylesheet" href="stylesheets/pygment_trac.css")
    %link(rel="stylesheet" href="stylesheets/heaps.css")

  %body.wrapper
    %header
      %h1 heaps.js

      %p.view
        %a(href="https://github.com/sillylogger/heaps")
          View the Project on GitHub
          %small sillylogger/heaps

      %ul
        %li
          %a(href="https://github.com/sillylogger/heaps/zipball/master")
            Download
            %strong ZIP File

        %li
          %a(href="https://github.com/sillylogger/heaps/tarball/master")
            Download
            %strong TAR Ball

        %li
          %a(href="https://github.com/sillylogger/heaps")
            View on
            %strong GitHub

    %section
      %p This is a jQuery plugin to layout a bunch of elements into a heap or any pattern can describe with a function.

      %pre $('ul#ball-of-images').heapify('li')

      %p Uses the defaults and looks like this:

      - images = Dir[ File.join(File.dirname(__FILE__), 'images', '*.jpg') ]
      %ul#ball-of-images.thumbnails
        - images.each_with_index do |f, i|
          - src = "images/#{File.basename(f)}"
          %li
            %a(href=src class="thumbnail size#{images.size - i}")
              %img(src=src)

      %p You can specify a different scoring function to layout the images.  The default is distance from center, but what if you pass a <code>scoring</code> option of:

      %pre.concat-bottom $('ul#demo').heapify('li', { scoring:
      %textarea#function.concat.code= "function(coordinate) {\n    return -1 * Math.abs(coordinate[1] - this.center[1]);\n}"
      %pre.concat-top });

      %button#function-runner.btn.btn-inverse Evaluate

      :javascript
        $('#function-runner').click(function(){
          eval("var userGeneratedFunction = " + $('textarea#function').val());

          var demo = $('ul#demo');
          demo.data('heap', null);

          demo.heapify('li', {
            scoring: userGeneratedFunction
          });
        });

      %p then you'll get something like this:

      %ul#demo.thumbnails
        - images.each_with_index do |f, i|
          - src = "images/#{File.basename(f)}"
          %li
            %a(href=src class="thumbnail size#{images.size - i}")
              %img(src=src)

      %hr

      %h2 $(parent).heapify(selector, options)

      %h3 parent
      %p Some DOM element with a width &amp; height.

      %h3 selector
      %p A CSS selector of items to be absolutely positioned within the parent.

      %h3 options

      %dl
        %dt.code options.step = 10
        %dd The granularity of item positioning. <code>1px</code> granularity is computationally intensive, thus the default step is <code>10px</code> until the algorithm is improved significantly.

        %dt.code options.scoring = function(coordinate) { }
        %dd This function is used to score each coordinate within the <code>parent</code>. This each coordinate is a pair of <code>[x,y]</code>.  The function is called within the scope of the heap and thus has access to <code>this.center</code> (a coordinate), <code>this.width</code>, and <code>this.height</code>.

        %dt.code options.sort = false
        %dd This flag will cause <code>heapify</code> to sort the selected elements by area &ndash; placing the larger element in the highest priority spots.

    %footer
      %p
        This project is maintained by
        %a(href="https://github.com/sillylogger")sillylogger
      %p
        %small
          Hosted on GitHub Pages &mdash; Theme by
          %a(href="https://github.com/orderedlist")orderedlist


    :javascript
      $(window).load(function(){
        var step = 10;

        // normalize all images so fit on a 10x10 grid
        $('.thumbnail').each(function(i, el) {
          var $el = $(el);
          var height = $el.height();
          $el.css({ height: height - (height % step) + 'px' });
        });

        $('#ball-of-images').heapify('li', { step: step });
      });
